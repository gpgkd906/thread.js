{
  "name": "Threads.js",
  "tagline": "",
  "body": "# thread.js\r\n\r\n## What is thread.js\r\nthreads is a lightweight thread api with es6 syntax.  \r\nand when you with the latest Chrome/Firefox/Edge, it use WebWorker to **free boost** your application with extra processor.  \r\n(safari do not support let/const syntax yet so it throw errors, but you can rewrite it to use var syntax--just a little work, if you want.)\r\n\r\n## How to use it\r\n\r\nyou could not to be confusion.  \r\nthere is only one api: **Thread.spawn**   \r\nThread.spawn receives only one parameter, an object like  \r\n\r\n```\r\n{\r\n\tdata: data,\r\n\tmove: [tansferable],\r\n\tfn: function (data) {},\r\n}\r\n```\r\nand returns a **Promise** object.\r\n###Notice\r\nwhich **fn** you give will be run in an **Standalone environment**, so you can not refer to your main context inside the fn.\r\n\r\n### with chrome/firefox\r\n```html\r\n<script src=\"lib/Thread.js\"></script>\r\n```\r\n```javascript\r\nThread.spawn({\r\n\tdata: data,\r\n\tfn: function(data) {\r\n\t\t \"use strict\";\r\n\t\t let result = data;\r\n\t    return result;\r\n\t}\r\n}).then(function(result) {\r\n\tconsole.log(result);\r\n});\r\n```\r\n\r\n### with nodejs\r\n\r\n```javascript\r\nvar Thread = require(\"threads.js\").Thread;\r\n\r\nThread.spawn({\r\n\tdata: data,\r\n\tfn: function(data) {\r\n\t\t\"use strict\";\r\n\t\tlet result = data;\r\n   \t\treturn result;\r\n\t}\r\n}).then(function(result) {\r\n\tconsole.log(result);\r\n});\r\n```\r\n\r\nrun example from node\r\n\t\r\n\t$ node --harmony_destructuring example.js\r\n\r\n### get it faster with browser\r\nuse move option to transfer big data without copy-cost.  \r\n[Transferable](https://developer.mozilla.org/en-US/docs/Web/API/Transferable)\r\n\r\n```javascript\r\n\"use strict\";\r\nlet count = 10;\r\nlet startTime = Date.now();\r\nfor(let i = 0; i < count; i++) {\r\n    let data = new Uint8Array(10*1024*1024);\r\n    Thread.spawn({\r\n\t\tdata: data,\r\n\t\tmove: [data.buffer],\r\n\t\tfn: function(data, move) {\r\n\t\t\t\"use strict\";\r\n\t\t\tfor(let i in data) {\r\n\t\t\t\t//do something\r\n\t\t\t}\r\n\t\t\tmove(data.buffer);\r\n\t\t\tlet result = data;\r\n\t \t  \treturn result;\r\n\t\t}\r\n    }).then(function(result) {\r\n\t\tconsole.log((Date.now() - startTime) + \" ms\");\r\n    }).catch(error => {\r\n    \tconsole.log(error);\r\n    });\r\n}\r\n```\r\n\r\n#What is next?\r\nI will replace prototype to Class when Chrome/Firefox/Safari/Edge is ready.  \r\nand other es6(or es7?) syntax when at least 2 browser support it.\r\n\r\n#Issue\r\nAnything will be receive, please tell me.\r\n\r\n#License\r\nLicensed under the [MIT License](https://opensource.org/licenses/MIT).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}